/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

if (params.low_memory){
    process {
        withName: KRAKEN2_KRAKEN2 {
            ext.args = ' --memory-mapping  --quick '
        }
    }
}



process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName:MULTIQC {
        ext {
            args = ''
        }
        publishDir = [path:{ "${params.outdir}/multiqc" }, mode:'copy', saveAs:{ filename -> filename.equals('versions.yml') ? null : filename }]
    }

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: BCFTOOLS_MPILEUP{
        ext.args2 = ' -c '
        errorStrategy  = 'ignore'
    }

    withName: CONFIDENCE_MERGE{
        errorStrategy  = 'ignore'
    }


    withName: MERGE_FASTA{
        errorStrategy = {
            task.exitStatus in [1,143,137,104,134,139] ? 'retry' : task.exitStatus in [255] ? 'ignore' : 'finish'
        }
    }

    withName: FASTQC{
        errorStrategy  = 'ignore'
        ext.args = '--quiet'
    }
    withName: NANOPLOT{
        errorStrategy  = 'ignore'
    }
    withName: BCFTOOLS_STATS {
        errorStrategy = {
            task.exitStatus in [1,143,137,104,134,139] ? 'retry' : task.exitStatus in [255] ? 'ignore' : 'finish'
        }
    }
    withName: SAMTOOLS_VIEW{
        ext.prefix = { "${meta.id}.remove" }
    }

    withName: BCFTOOLS_CONSENSUS{
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.consensus" }
    }
    withName: PATHOGENS_FIND_SAMPLE {
        errorStrategy = 'ignore'
    }


    withName: ORGANISM_MERGE_REPORT {
        ext.singularity_pull_docker_container = true
        errorStrategy = 'ignore'
    }
    withName: MINIMAP2_ALIGN {
        ext.args = ' -x map-ont  '
        errorStrategy = 'ignore'
    }
    withName: MINIMAP2_ALIGN {
        ext.args = ' -x map-ont  '
        errorStrategy = 'ignore'
    }
    withName: SAMTOOLS_HIST_COVERAGE {
        ext.args = ' -w 100 -A  '
        ext.prefix = { "${meta.id}.histogram" }
    }
    withName: TAXPASTA_STANDARDISE {
        errorStrategy = 'ignore'
    }
    withName: METAPHLAN_METAPHLAN {
        errorStrategy = 'ignore'
    }

    withName: FEATURES_MAP{
        errorStrategy = 'ignore'
    }


    withName: 'SPADES' {
        ext.args =  "--meta"
        publishDir = [
            [
                path: { "${params.outdir}/assembly/spades/meta" },
                mode: params.publish_dir_mode,
                pattern: '*.{fa.gz,gfa.gz}'
            ],
            [
                path: { "${params.outdir}/assembly/spades/meta/log" },
                mode: params.publish_dir_mode,
                pattern: '*.log'
            ]
        ]
    }
    withName: 'FLYE' {
        ext.args =  "--meta "
        publishDir = [
            [
                path: { "${params.outdir}/assembly/flye/meta" },
                mode: params.publish_dir_mode,
                pattern: '*.{fa.gz,gfa.gz}'
            ],
            [
                path: { "${params.outdir}/assembly/flye/meta/log" },
                mode: params.publish_dir_mode,
                pattern: '*.log'
            ]
        ]
    }




    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}
